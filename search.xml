<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/04/14/Week4%20-%20Finance%20and%20Trading/"/>
      <url>/2023/04/14/Week4%20-%20Finance%20and%20Trading/</url>
      
        <content type="html"><![CDATA[<h2 id="Week4-Finance-and-Trading"><a href="#Week4-Finance-and-Trading" class="headerlink" title="Week4 - Finance and Trading"></a>Week4 - Finance and Trading</h2><blockquote><p><strong>Goal:</strong></p><p>With the knowledge of finance and advanced python programming skills, design a trading system that is able to make decisions based on real-time data streamed from the exchange.</p></blockquote><ul><li><h4 id="Brief-Finance-Introduction"><a href="#Brief-Finance-Introduction" class="headerlink" title="Brief Finance Introduction"></a>Brief Finance Introduction</h4><p><strong>Captital</strong></p><ol><li><h2 id="Debit-Capital"><a href="#Debit-Capital" class="headerlink" title="Debit Capital"></a>Debit Capital</h2></li><li><p>Equity Captial</p></li><li><p>Financing(融资)</p></li></ol></li><li><h4 id="Regulations"><a href="#Regulations" class="headerlink" title="Regulations"></a>Regulations</h4></li><li><h4 id="Trading-Instruments"><a href="#Trading-Instruments" class="headerlink" title="Trading Instruments"></a>Trading Instruments</h4></li><li><h4 id="Exchange-and-Trading-Systems"><a href="#Exchange-and-Trading-Systems" class="headerlink" title="Exchange and Trading Systems"></a>Exchange and Trading Systems</h4></li><li><h4 id="Communication-Gateway-In-x2F-Out"><a href="#Communication-Gateway-In-x2F-Out" class="headerlink" title="Communication Gateway In&#x2F;Out"></a>Communication Gateway In&#x2F;Out</h4></li><li><h4 id="Pandas-Datareader"><a href="#Pandas-Datareader" class="headerlink" title="Pandas Datareader"></a>Pandas Datareader</h4><ul><li><p><strong>Strength:</strong> Automatically fetch the latest finance data instead of downloading csv files from websites and loading into ide again and again.</p></li><li><p><strong>Usage:</strong></p><ul><li><p>Install pandas_datareader package and import it.</p></li><li><p>Choose an api that it provide.</p></li><li><p>Define the ticker, start date, end date and data intervals(if needed) as parameters.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas_datareader <span class="keyword">as</span> pdr</span><br><span class="line"><span class="keyword">import</span> datatime <span class="keyword">as</span> dt</span><br><span class="line"></span><br><span class="line">ticker = <span class="string">&#x27;AAPL&#x27;</span></span><br><span class="line">start = dt.datetime(<span class="number">2019</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">end = dt.datetime(<span class="number">2023</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">data = pdr.get_data_yahoo(ticker, start, end)</span><br><span class="line">data.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate moving average with a defined time window</span></span><br><span class="line">ma = <span class="number">50</span></span><br><span class="line">smaString = <span class="string">&#x27;Sma_&#x27;</span>+<span class="built_in">str</span>(ma)</span><br><span class="line">df[smaString] = data.iloc[:, <span class="number">4</span>].rolling(window = ma).mean()</span><br><span class="line"><span class="comment"># Cut out the first 50 days&#x27; data that without an ma50 value</span></span><br><span class="line">df = df.iloc[ma:]</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Questions:</strong></p><ul><li>What does yfinance package do, is it still useful if already have pdr?</li><li>What is ‘Adj Close’ value mean?</li></ul></li></ul></li></ul><p>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MSCA 32019 Week 1</title>
      <link href="/2023/04/10/Week1%20-%20Python%20Review/"/>
      <url>/2023/04/10/Week1%20-%20Python%20Review/</url>
      
        <content type="html"><![CDATA[<h2 id="Week1-Python-Review"><a href="#Week1-Python-Review" class="headerlink" title="Week1 - Python Review"></a>Week1 - Python Review</h2><ul><li><h4 id="Von-Neumann-architecture"><a href="#Von-Neumann-architecture" class="headerlink" title="Von Neumann architecture"></a>Von Neumann architecture</h4></li><li><h4 id="Compilation-Chain-in-C-x2F-C-Java-and-Python"><a href="#Compilation-Chain-in-C-x2F-C-Java-and-Python" class="headerlink" title="Compilation Chain in C&#x2F;C++, Java and Python"></a>Compilation Chain in C&#x2F;C++, Java and Python</h4></li><li><h4 id="CPU-Bound-vs-Memory-Bound"><a href="#CPU-Bound-vs-Memory-Bound" class="headerlink" title="CPU-Bound vs Memory-Bound"></a>CPU-Bound vs Memory-Bound</h4></li><li><h4 id="Mutable-vs-Immutable-Objects-in-python-basics-video-link"><a href="#Mutable-vs-Immutable-Objects-in-python-basics-video-link" class="headerlink" title="Mutable vs Immutable Objects (in python basics) (video link)"></a>Mutable vs Immutable Objects (in python basics) (video link)</h4></li><li><h4 id="OOP-in-Python-in-python-basics"><a href="#OOP-in-Python-in-python-basics" class="headerlink" title="OOP in Python (in python basics)"></a>OOP in Python (in python basics)</h4><ul><li>Class (example)</li><li>Inheriting (example)</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刷题日记22.12.02</title>
      <link href="/2022/12/02/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B022.12.02/"/>
      <url>/2022/12/02/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B022.12.02/</url>
      
        <content type="html"><![CDATA[<h3 id="217-存在重复元素"><a href="#217-存在重复元素" class="headerlink" title="217. 存在重复元素"></a>217. 存在重复元素</h3><p>题目链接：<a href="https://leetcode.cn/problems/contains-duplicate/description/">https://leetcode.cn/problems/contains-duplicate/description/</a></p><p><strong>方法一：</strong>使用集合，遍历 nums 中的所有数字。若在集合中已经出现了，则直接返回 true，否则将该数字加入集合中。最后返回 false。</p><p>Time：O(n)，Space：O(n)。</p><p><strong>方法二：</strong>将 nums 排序，比较相邻数字即可，若遇到相同值对，返回 true，否则遍历结束返回 false。</p><p>Time：O(n*log(n))，Space：O(n)。</p><h3 id="1002-查找共用字符"><a href="#1002-查找共用字符" class="headerlink" title="1002. 查找共用字符"></a>1002. 查找共用字符</h3><p>题目链接：<a href="https://leetcode.cn/problems/find-common-characters/description/">https://leetcode.cn/problems/find-common-characters/description/</a></p><p>一开始我的思路就是应用 349 题（数组求并集）的算法，在每两个字符串之间求相同字符的交集。但是这样做第一没有考虑<strong>此题是可以包含重复字符</strong>的和 349 不同，第二时间复杂度将达到 O(m*n)。</p><p><strong>高效思路：</strong>统计出搜索字符串里 26 个字符的出现的频率，然后取每个字符频率最小值，最后转成输出格式就可以了。</p><p>Time：O(n)，Space：O(n)。</p><h3 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49. 字母异位词分组"></a>49. 字母异位词分组</h3><p>题目链接：<a href="https://leetcode.cn/problems/group-anagrams/description/">https://leetcode.cn/problems/group-anagrams/description/</a></p><p><strong>思路：</strong>将每个字符串 str 中的 26 个字母的数量统计出来，依此生成一个 string 型的 key，将 str 添加到 map 中。最后返回 map 的所有 value。map 的结构是<code>&lt;String, ArrayList&lt;String&gt;&gt;</code> 。</p><p>Time：O(n)，Space：O(n)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        Map&lt;String, ArrayList&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">                temp[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num: temp) &#123;</span><br><span class="line">                sb.append(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">                sb.append(num);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">                map.put(key, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(key).add(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(map.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="128-最长连续序列"><a href="#128-最长连续序列" class="headerlink" title="128. 最长连续序列"></a>128. 最长连续序列</h3><p>题目链接：<a href="https://leetcode.cn/problems/longest-consecutive-sequence/description/">https://leetcode.cn/problems/longest-consecutive-sequence/description/</a></p><p><strong>思路：</strong></p><ol><li>用数组中的数字构建一个无重复元素的 set。</li><li>对于 set 中的每个数字 num 判断 num - 1 是否存在于 set，若存在则跳过 num。</li><li>若不存在，则每次将 num 增加 1，判断是否仍存在于 set。若存在，curLen + 1，不存在则结束循环，比较 curLen 和 longest 的值。</li></ol><p><strong>难点：</strong>如果已知有一个 x,x+1,x+2,⋯ ,x+y 的连续序列，而我们却重新从 x+1，x+2 或者是 x+y 处开始尝试匹配，那么得到的结果肯定不会优于枚举 x 为起点的答案，因此我们在外层循环的时候碰到这种情况跳过即可。</p><p>那么怎么判断是否跳过呢？由于我们要枚举的数 x 一定是在数组中不存在前驱数 x−1 的，不然按照上面的分析我们会从 x−1 开始尝试匹配，因此我们每次在哈希表中检查是否存在 x−1 即能判断是否需要跳过了。</p><p>Time：O(n)，Space：O(n)。</p><h3 id="36-有效的数独"><a href="#36-有效的数独" class="headerlink" title="36. 有效的数独"></a>36. 有效的数独</h3><p>题目链接：<a href="https://leetcode.cn/problems/valid-sudoku/">https://leetcode.cn/problems/valid-sudoku/</a></p><p><strong>思路：</strong>遍历 board 中每个数字，分别让其所在行、列、小网格中的该数数量+1。若这三个值有一个&gt;1 则返回 false。</p><p><strong>注意：</strong>如何记录小网格中 1~9 出现的次数，要用三维数组。</p><p>Time：O(1)，Space：O(1)。</p><h3 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h3><p>题目链接：<a href="https://leetcode.cn/problems/ransom-note/description/">https://leetcode.cn/problems/ransom-note/description/</a></p><p>几乎和 242 题（同构异位词）一样，不赘述了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刷题日记22.12.01</title>
      <link href="/2022/12/01/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B022.12.01/"/>
      <url>/2022/12/01/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B022.12.01/</url>
      
        <content type="html"><![CDATA[<h3 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a>242. 有效的字母异位词</h3><p>题目链接：<a href="https://leetcode.cn/problems/valid-anagram/">https://leetcode.cn/problems/valid-anagram/</a></p><p>先搞清楚什么是字母异位词（Anagram），就是字母的<strong>种类</strong>和<strong>个数</strong>都相同，但<strong>顺序</strong>可能不同。</p><p>自己想的时候想要用 hashmap：</p><p>先遍历第一个单词的每个字母，在 map 中更新数量。再遍历第二个单词的每个字母，在 map 中将该字母数量减一，若 map 中没有该字母，则返回 false。最后遍历 map 中的每个字母，若数量不为 0，则返回 false。map 遍历完成后若还没结束返回 true。</p><p>Time：O(m + n) —&gt; O(n)，Space：O(s) —&gt; O(n)。</p><p>但是忽略了题目中的 constraints，有说明所有字母都是小写字母，所以直接开一个<strong>长度为 26 的 char 类型的数组</strong>就可以了。在面试中也是一样，听完题目先跟面试官确定好限制条件、边界条件等再开始埋头做，做的过程中有疑问随时问。</p><h3 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h3><p>题目链接：<a href="https://leetcode.cn/problems/intersection-of-two-arrays/">https://leetcode.cn/problems/intersection-of-two-arrays/</a></p><p>想到两种方法：</p><ol><li><p>双循环：对于 nums1 中的每个数字都在 nums2 中寻找，找到则加入结果集。</p><p> Time：O(m * n) —&gt; O(n^2^)，Space：O(n)。</p><p> 但其实可以用两个 set 装两个数组中的数字，因为可以用 set 的 contains 方法，在 nums2 中查找是否有某个数字的时间复杂度可以降为 O(1)。</p><p> 还有一点需要注意的是，在 Java 中将 int 型 List 转为 Array，目前我找到的最简便方式：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().mapToInt(Integer::intValue).toArray();</span><br></pre></td></tr></table></figure></li><li><p>双指针：两个数组排序后指定两个指针分别指向头部。</p><p> Time：O(m + n) —&gt; O(n)，Space：O(n)。</p></li></ol><h3 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h3><p>题目链接：<a href="https://leetcode.cn/problems/happy-number/">https://leetcode.cn/problems/happy-number/</a></p><p>重点：环的检测 —&gt; 佛洛依德原理 —&gt; 快慢指针。</p><p>Time：<em>O</em>(2⋅log<em>n</em>) —&gt; <em>O</em>(log<em>n</em>)，Space：O(1)。</p><h3 id="454-四数相加-2"><a href="#454-四数相加-2" class="headerlink" title="454. 四数相加 2"></a>454. 四数相加 2</h3><p>题目链接：<a href="https://leetcode.cn/problems/4sum-ii/">https://leetcode.cn/problems/4sum-ii/</a></p><p><strong>思路：</strong>双循环遍历 nums1 和 nums2 中的数字组合，每一对求和为 temp，在 map 中将该值数量加 1。然后再双循环遍历 nums3 和 nums4 中的数字组合，每一对 6 也求和为 temp，在 map 中获取 0 - temp 的数量，加入 count 中。</p><p><strong>误区：</strong> 自己想的时候一直在纠结四个数的 index，甚至想用 4 个指针？？但其实不用纠结（i，j，k，l）具体的组合，因为只求 count，也不用去重。</p><p>Time：O(n^2^)， Space：O(n)。</p><h3 id="205-同构字符串"><a href="#205-同构字符串" class="headerlink" title="205. 同构字符串"></a>205. 同构字符串</h3><p>题目链接：<a href="https://leetcode.cn/problems/isomorphic-strings/">https://leetcode.cn/problems/isomorphic-strings/</a></p><p>同构字符串（Isomorphic String）：结构相同的字符串，比如 foo 和 egg，都是 abb 格式。</p><p>有两种情况将导致 s 和 t 结构不同，都要考虑：</p><ol><li>s 中的某个字符，在 t 中对应了两个不同的字符。例子：s &#x3D; foo， t &#x3D; bar。</li><li>t 中的某个字符，在 s 中对应了两个不同的字符。例子：s &#x3D; badc， t &#x3D; baba。</li></ol><p>思路是自己能想出来但不能很好地表达。简单说就是遍历 t 中的每个字符 c1，在 s 中找到同索引处的字符 c2，将这一对映射关系存入 map 中，并 append c2 进 sb。但若在 used 集合中已经存在了 c2，也就是 c2 已经对应过其它字符了，则直接返回 false（对应情况 1）。或者 c1 在 map 中已经有映射了则不要重复存值，直接用已经有的值（对应情况 2）。</p><p>Time：O(n)，Space：O(n)。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2022/10/28/2022-10-28-%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
      <url>/2022/10/28/2022-10-28-%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
